#include <iostream>
#include <cuda_runtime.h>

#include <libpng/png.h>

#define gpuErrchk(ans) gpuAssert((ans), __FILE__, __LINE__)
inline void gpuAssert(cudaError_t code, const char *file, int line, bool abort=true)
{
    if (code != cudaSuccess)
    {
        fprintf(stderr,"GPUassert: %s %s %d\n", cudaGetErrorString(code), file, line);
        if (abort) exit(code);
    }
}

__global__ void sum(int* a, int* b, int* c)
{
    c[blockIdx.x] = a[blockIdx.x] + b[blockIdx.x];
    printf("blockIdx.x: %i\n", blockIdx.x);
}

int main()
{
    cudaFree(nullptr);

    png_image image;
    memset(&image, 0, (sizeof image));
    image.version = PNG_IMAGE_VERSION;

    if (!png_image_begin_read_from_file(&image, "/home/nvidia/eclipse-workspace/cuda-greyscale/colors.png"))
    {
        std::cerr << "Failed to open image\n";
        return 1;
    }

    void* d_image;
    gpuErrchk(cudaMalloc(&d_a, image.));

//    int h_a[] = {0, 1, 2, 3};
//    int h_b[] = {0, 1, 2};
//    int h_c[sizeof(h_a) / sizeof(int)];
//
//
//    int* d_a;
//    int* d_b;
//    int* d_c;
//
//    gpuErrchk(cudaMalloc(&d_a, sizeof(h_a)));
//    gpuErrchk(cudaMemcpy(d_a, h_a, sizeof(h_a), cudaMemcpyHostToDevice));
//    gpuErrchk(cudaMalloc(&d_b, sizeof(h_b)));
//    gpuErrchk(cudaMemcpy(d_b, h_b, sizeof(h_b), cudaMemcpyHostToDevice));
//    gpuErrchk(cudaMalloc(&d_c, sizeof(h_c)));
//
//    sum<<<dim3(sizeof(h_a) / sizeof(int), 1, 1), dim3(1, 1, 1)>>>(d_a, d_b, d_c);
//
//    gpuErrchk(cudaDeviceSynchronize());
//
//    gpuErrchk(cudaMemcpy(h_c, d_c, sizeof(h_c), cudaMemcpyDeviceToHost));
//
//    for (auto i = 0; i < sizeof(h_c) / sizeof(int); ++i) {
//        printf("h_c[%i]: %i\n", i, h_c[i]);
//    }

    return 0;
}
